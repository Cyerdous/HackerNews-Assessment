using HackerNews_Assessment.Repositories;
using HackerNews_Assessment.Services;
using Microsoft.Extensions.Logging;
using NSubstitute;
using Xunit;

namespace HackerNews_Assessment.Tests.Services;

public class HackerNewsServiceTests: IDisposable
{
	private readonly ILogger<HackerNewsService> _logger;
	private readonly IHackerNewsRepository _repository;
	const int itemsPerPage = 20;

	public HackerNewsServiceTests()
	{
		_logger = Substitute.For<ILogger<HackerNewsService>>();
		_repository = Substitute.For<IHackerNewsRepository>();
	}

	public void Dispose()
	{

	}

	[Fact]
	public async Task GetStoryCount_ForQuery_ReturnsInt()
	{
		var data = new List<int>{};
		_repository.ReadNewStories().Returns(data);
		_repository.GetStoryById(Arg.Any<int>()).Returns(x => 
		{
			var item = Substitute.For<HackerNewsItem>();
			item.Id = (int)x[0]; 
			return item;
		});
		var service = new HackerNewsService(_logger, _repository, new HNMemoryCache());

		var response = await service.GetStoryCount("");
		
		Assert.IsType<int>(response);
		Assert.Equal(data.Count, response);
	}

	[Fact]
	public async Task GetNewStories_ReturnsList()
	{
		var data = new List<int>{};
		var page = 0;
		_repository.ReadNewStories().Returns(data);
		_repository.GetStoryById(Arg.Any<int>()).Returns(x => 
		{
			var item = Substitute.For<HackerNewsItem>();
			item.Id = (int)x[0]; 
			return item;
		});
		var service = new HackerNewsService(_logger, _repository, new HNMemoryCache());

		var response = await service.GetNewStories(page);

		Assert.IsType<List<NewsStory>>(response);
		Assert.Equal(itemsPerPage, response.Count);
		for(var i = itemsPerPage*page; i<response.Count + itemsPerPage*page; i++)
		{
			Assert.Equal(data[i], response[i].Id);
		}
	}

}